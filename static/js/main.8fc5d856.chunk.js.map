{"version":3,"sources":["redux/contacts/contacts-types.js","redux/contacts/contacts-actions.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["name","number","type","types","payload","id","shortid","generate","ContactForm","state","nameInputId","numberInputId","hendelChange","e","target","value","setState","hendelSubmit","preventDefault","props","onSubmit","reset","className","this","htmlFor","title","required","onChange","Component","connect","dispatch","contactsActions","contacts","onDeleteTodo","map","onClick","App","filter","addTodo","contact","includes","alert","prevState","formSubmitHandler","data","console","log","changeFilter","currentTarget","getVisibleTodos","normalizedFilter","toLowerCase","combineReducers","rootReducer","contactsReduser","store","createStore","composeWithDevTools","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8fc5d856.chunk.js","sourcesContent":["\r\n\r\nexport default {\r\n ADD: 'contacts/add',\r\n DELETE: 'contacts/delete',\r\n CHANGE_FILTER: 'contacts/filter'\r\n}","import types from './contacts-types'\r\nimport shortid from 'shortid';\r\n\r\nconst addTodo = (name, number) => ({\r\n    type: types.ADD,\r\n    payload: {\r\n        id: shortid.generate(),\r\n        name: name,\r\n        number: number,\r\n    }\r\n});\r\n\r\n\r\nconst deleteTodo = contactId => ({\r\n    type: types.DELETE,\r\n    payload: contactId\r\n})\r\n\r\nexport default {addTodo, deleteTodo}","import React, { Component } from 'react';\r\nimport PropTypes from \"prop-types\";\r\n  //ставим npm i shortid\r\nimport shortid from 'shortid';\r\nimport './ContactForm.css'\r\nimport { connect } from 'react-redux'\r\nimport contactsActions from '../../redux/contacts/contacts-actions'\r\n\r\n  \r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: '', \r\n    number: ''\r\n  };\r\n//генерим там лежит уникалый индефикатор\r\n  nameInputId = shortid.generate();\r\n  numberInputId = shortid.generate();\r\n   \r\n    //общий метод для инпутов патерн для форм по внешнему виду контролируемый елемент\r\n    hendelChange = e => {\r\n        const { name, value } = e.target;\r\n        this.setState({\r\n            [name]: value,\r\n        })\r\n    };\r\n    //сабмит формы\r\n    hendelSubmit = e => { \r\n        e.preventDefault();\r\n      // console.log(this.state)\r\n      //перекидываем данные в апп\r\n      this.props.onSubmit( this.state.name, this.state.number)\r\n      \r\n        this.reset();\r\n    };\r\n    //сброс формы очистить стейт\r\n  reset = () => {\r\n    this.setState({\r\n      name: '',\r\n      number: ''\r\n    })\r\n  };\r\n\r\n\r\n    render() {\r\n      return (\r\n        <form className='form' onSubmit={this.hendelSubmit}>\r\n          <label htmlFor={this.nameInputId}>\r\n            Name <input\r\n              type=\"text\"\r\n              value={this.state.name}\r\n              name=\"name\"\r\n            //  pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n              required\r\n              id={this.nameInputId}\r\n              onChange={this.hendelChange}\r\n            />\r\n          </label>\r\n          <label htmlFor={this.numberInputId}>\r\n            Number <input\r\n              type=\"tel\"\r\n              value={this.state.number}\r\n              name=\"number\"\r\n             // pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n              title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n              id={this.numberInputId}\r\n              onChange={this.hendelChange}\r\n              required\r\n            />\r\n          </label>\r\n            \r\n                \r\n          <button className=\"button\" type='submit'>Add contacts</button>\r\n      \r\n        </form>\r\n            \r\n           \r\n      );\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onSubmit: (name, number) => dispatch(contactsActions.addTodo(name, number)) \r\n})\r\n\r\n   ContactForm.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactForm);","import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport './ContactList.css'\r\nimport { connect } from 'react-redux'\r\n\r\nconst ContactList = (({ contacts, onDeleteTodo }) =>\r\n    <ul className=\"TodoList\">\r\n        {contacts.map(({ id, name, number }) => (\r\n            <li key={id} className=\"TodoList__item\">\r\n                <p className=\"TodoList__text\">{name}: {number}</p>\r\n                <button onClick={() => onDeleteTodo(id)}>Delete</button>\r\n            </li>\r\n        ))}\r\n    </ul>\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n    contacts: state.contacts.contacts\r\n})\r\n\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n   \r\n    onDeleteTodo: () => null\r\n})\r\n\r\n\r\nContactList.propTypes = {\r\n  onDeleteTodo: PropTypes.func.isRequired,\r\n  contacts: PropTypes.arrayOf(PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n  })),\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);","import React, { Component } from 'react';\nimport shortid from 'shortid';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport ContactList from './components/ContactList/ContactList';\nimport Filter from './components/Filter/Filter';\n\nclass App extends Component {\n\n  state = {\n    contacts: [\n      { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n      { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n      { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n      { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n    ],\n    filter: ''\n  };\n//не перенесли меп\n  addTodo = (name, number) => {\n    const existingName = this.state.contacts.map(contact => contact.name).includes(name);\n  \n    if (existingName) {\n      alert(`${name} is already in contacts`);\n    } else {\n      const contacts = {\n        id: shortid.generate(),\n        name: name,\n        number: number,\n      }\n      //обновляем состояние от предыдущего добавляем элемент, а стейте арр идет обновление\n      this.setState(prevState => ({\n        contacts: [...prevState.contacts, contacts],\n      })\n      );\n    }\n  };\n   \n \n\n//убираем елемент , чей id совпадает\n  //  deleteTodo = contactId => {\n  //   this.setState(prevState => ({\n  //     contacts: prevState.contacts.filter(contact => contact.id !== contactId),\n  //   }));\n  // };\n  \n   \n  //получаем пропы с формы\n     formSubmitHandler = data => {\n      console.log(data)\n     }\n  \n   changeFilter = e => {\n    this.setState({ filter: e.currentTarget.value });\n   };\n  \n  getVisibleTodos = () => {\n    const { filter, contacts } = this.state;\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n  \n    render() {\n      const { filter } = this.state\n      const visibleTodos = this.getVisibleTodos();\n      \n      return (\n        <div>\n         <h1>Phonebook</h1>\n          {/* <ContactForm onSubmit={this.addTodo} /> */}\n               <ContactForm />\n          <h2>Contacts</h2>\n          {/* <Filter filter={filter} onChange={ this.changeFilter}/> */}\n          {/* <ContactList contacts={visibleTodos} onDeleteTodo={this.deleteTodo} /> */}\n            <ContactList  />\n        </div>\n      );\n    }\n}\n\n\nexport default App;","import { combineReducers } from \"redux\"\r\nimport types from './contacts-types'\r\n\r\nconst contacts = (state = [],  { type, payload }) => {\r\n    switch (type) {\r\n        case types.ADD:\r\n            return [...state, payload]\r\n        case types.DELETE:\r\n            return state.filter(({id}) => id !== payload)\r\n        \r\n        \r\n        default: return state\r\n    }\r\n    \r\n}\r\n\r\nconst filter = (state = '', action) => {\r\n    return state\r\n    }\r\n\r\n    //описали редьюсер\r\nexport default combineReducers({\r\n    contacts,\r\n    filter\r\n})","import { combineReducers, createStore } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport contactsReduser from './contacts/contacts-reducer'\r\n\r\nconst rootReducer = combineReducers({\r\n        contacts: contactsReduser,\r\n    // filter: ''\r\n \r\n})\r\n\r\n// const reducer = (state = {}, action) => state;\r\n\r\n\r\nconst store = createStore(rootReducer, composeWithDevTools());\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport store from './redux/store'\nimport { Provider } from 'react-redux';\n\nconsole.log(store)\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>;\n     </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}