{"version":3,"sources":["redux/contacts/contacts-actions.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["addTodo","createAction","name","number","payload","id","shortid","generate","deleteTodo","changeFilter","ContactForm","state","nameInputId","numberInputId","hendelChange","e","target","value","setState","hendelSubmit","preventDefault","props","onSubmit","reset","className","this","htmlFor","type","pattern","title","required","onChange","Component","connect","dispatch","contactsActions","contacts","filter","allTodos","normalizedFilter","toLowerCase","contact","includes","getVisibleTodos","onDeleteTodo","map","onClick","App","createReducer","actions","_","combineReducers","middleware","getDefaultMiddleware","logger","store","configureStore","reducer","contactsReduser","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6ac35ea5.chunk.js","sourcesContent":["//import types from './contacts-types'\r\nimport shortid from 'shortid';\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\nconst addTodo = createAction('contacts/add', (name, number) => {\r\n    return {\r\n        payload: {\r\n            id: shortid.generate(),\r\n            name,\r\n            number,\r\n        }\r\n    }\r\n});\r\n\r\n// const addTodo = (name, number) => ({\r\n//     type: types.ADD,\r\n//     payload: {\r\n//         id: shortid.generate(),\r\n//         name: name,\r\n//         number: number,\r\n//     }\r\n// });\r\n\r\nconst deleteTodo = createAction('contacts/delete')\r\n\r\n// const deleteTodo = contactId => ({\r\n//     type: types.DELETE,\r\n//     payload: contactId\r\n// })\r\n\r\nconst changeFilter = createAction('contacts/changeFilter')\r\n\r\n// const changeFilter = value => ({\r\n//     type: types.CHANGE_FILTER,\r\n//     payload: value\r\n// })\r\n\r\nexport default {addTodo, deleteTodo, changeFilter}","import React, { Component } from 'react';\r\nimport PropTypes from \"prop-types\";\r\n  //ставим npm i shortid\r\nimport shortid from 'shortid';\r\nimport './ContactForm.css'\r\nimport { connect } from 'react-redux'\r\nimport contactsActions from '../../redux/contacts/contacts-actions'\r\n\r\n  \r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: '', \r\n    number: ''\r\n  };\r\n//генерим там лежит уникалый индефикатор\r\n  nameInputId = shortid.generate();\r\n  numberInputId = shortid.generate();\r\n   \r\n    //общий метод для инпутов патерн для форм по внешнему виду контролируемый елемент\r\n    hendelChange = e => {\r\n        const { name, value } = e.target;\r\n        this.setState({\r\n            [name]: value,\r\n        })\r\n    };\r\n    //сабмит формы\r\n    hendelSubmit = e => { \r\n        e.preventDefault();\r\n      // console.log(this.state)\r\n      //перекидываем данные в апп\r\n       this.props.onSubmit( this.state.name, this.state.number)\r\n      \r\n        this.reset();\r\n    };\r\n    //сброс формы очистить стейт\r\n  reset = () => {\r\n    this.setState({\r\n      name: '',\r\n      number: ''\r\n    })\r\n  };\r\n\r\n\r\n    render() {\r\n      return (\r\n        <form className='form' onSubmit={this.hendelSubmit}>\r\n          <label htmlFor={this.nameInputId}>\r\n            Name <input\r\n              type=\"text\"\r\n              value={this.state.name}\r\n              name=\"name\"\r\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n              required\r\n              id={this.nameInputId}\r\n              onChange={this.hendelChange}\r\n            />\r\n          </label>\r\n          <label htmlFor={this.numberInputId}>\r\n            Number <input\r\n              type=\"tel\"\r\n              value={this.state.number}\r\n              name=\"number\"\r\n             // pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n              title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n              id={this.numberInputId}\r\n              onChange={this.hendelChange}\r\n              required\r\n            />\r\n          </label>\r\n            \r\n                \r\n          <button className=\"button\" type='submit'>Add contacts</button>\r\n      \r\n        </form>\r\n            \r\n           \r\n      );\r\n    }\r\n}\r\n\r\n// const mapStateToProps = state => {\r\n//     const { filter, contacts } = state.contacts;\r\n//     const visibleTodos = getVisibleTodos(contacts, filter)\r\n//     return {\r\n//         contacts: visibleTodos,\r\n//     };\r\n// }\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onSubmit: (name, number) => dispatch(contactsActions.addTodo(name, number)) \r\n})\r\n\r\n   ContactForm.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactForm);","import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport './ContactList.css'\r\nimport { connect } from 'react-redux'\r\nimport contactsActions from '../../redux/contacts/contacts-actions'\r\n\r\nconst ContactList = (({ contacts, onDeleteTodo }) =>\r\n    <ul className=\"TodoList\">\r\n        {contacts.map(({ id, name, number }) => (\r\n            <li key={id} className=\"TodoList__item\">\r\n                <p className=\"TodoList__text\">{name}: {number}</p>\r\n                <button onClick={() => onDeleteTodo(id)}>Delete</button>\r\n            </li>\r\n        ))}\r\n    </ul>\r\n);\r\n\r\n  \r\n  const getVisibleTodos = (allTodos, filter) => {\r\n\r\n    const normalizedFilter = filter.toLowerCase();\r\n\r\n      return allTodos.filter(contact =>\r\n          contact.name.toLowerCase().includes(normalizedFilter),\r\n      );\r\n  };\r\n\r\nconst mapStateToProps = state => {\r\n    const { filter, contacts } = state.contacts;\r\n    const visibleTodos = getVisibleTodos(contacts, filter)\r\n    return {\r\n        contacts: visibleTodos,\r\n    };\r\n}\r\n\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onDeleteTodo: (id) => dispatch(contactsActions.deleteTodo(id))\r\n})\r\n\r\n\r\nContactList.propTypes = {\r\n  onDeleteTodo: PropTypes.func.isRequired,\r\n  contacts: PropTypes.arrayOf(PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n  })),\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);","import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport './Filter.css'\r\nimport { connect } from 'react-redux';\r\nimport contactsActions from '../../redux/contacts/contacts-actions'\r\n\r\n//его стейт в арр\r\n\r\nconst Filter = ({ filter, onChange }) => (\r\n  <label className=\"label\">\r\n    Find contacts by name\r\n    <input type=\"text\" value={filter} onChange={onChange} />\r\n  </label>\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n    filter: state.contacts.filter\r\n})\r\n\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onChange: (e) => dispatch(contactsActions.changeFilter(e.target.value))\r\n})\r\n\r\n\r\n\r\nFilter.propTypes = {\r\n  filter: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import React, { Component } from 'react';\nimport shortid from 'shortid';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport ContactList from './components/ContactList/ContactList';\nimport Filter from './components/Filter/Filter';\n\nclass App extends Component {\n\n  // state = {\n  //   contacts: [\n  //     { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n  //     { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n  //     { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n  //     { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n  //   ],\n  //   filter: ''\n  // };\n//не перенесли меп\n  // addTodo = (name, number) => {\n  //   const existingName = this.state.contacts.map(contact => contact.name).includes(name);\n  \n  //   if (existingName) {\n  //     alert(`${name} is already in contacts`);\n  //   } else {\n  //     const contacts = {\n  //       id: shortid.generate(),\n  //       name: name,\n  //       number: number,\n  //     }\n  //     //обновляем состояние от предыдущего добавляем элемент, а стейте арр идет обновление\n  //     this.setState(prevState => ({\n  //       contacts: [...prevState.contacts, contacts],\n  //     })\n  //     );\n  //   }\n  // };\n   \n \n\n//убираем елемент , чей id совпадает\n  //  deleteTodo = contactId => {\n  //   this.setState(prevState => ({\n  //     contacts: prevState.contacts.filter(contact => contact.id !== contactId),\n  //   }));\n  // };\n  \n   \n  //получаем пропы с формы\n    //  formSubmitHandler = data => {\n    //   console.log(data)\n    //  }\n  \n  \n  // getVisibleTodos = () => {\n  //   const { filter, contacts } = this.state;\n  //   const normalizedFilter = filter.toLowerCase();\n\n  //   return contacts.filter(contact =>\n  //     contact.name.toLowerCase().includes(normalizedFilter),\n  //   );\n  // };\n  \n    render() {\n      // const { filter } = this.state\n      // const visibleTodos = this.getVisibleTodos();\n      \n      return (\n        <div>\n         <h1>Phonebook</h1>\n          {/* <ContactForm onSubmit={this.addTodo} /> */}\n          <ContactForm />\n          <h2>Contacts</h2>\n          {/* <Filter filter={filter} onChange={ this.changeFilter}/> */}\n           <Filter />\n          {/* <ContactList contacts={visibleTodos} onDeleteTodo={this.deleteTodo} /> */}\n           <ContactList  />\n        </div>\n      );\n    }\n}\n\n\nexport default App;","import { combineReducers } from \"redux\"\r\nimport types from './contacts-types'\r\nimport actions from './contacts-actions'\r\nimport { createReducer } from '@reduxjs/toolkit';\r\n\r\n//console.log(actions.addTodo.type)\r\n\r\nconst contacts = createReducer([], {\r\n    [actions.addTodo]: (state, { payload }) => [...state, payload],\r\n    [actions.deleteTodo]: (state, { payload }) => state.filter(({ id }) => id !== payload)\r\n});\r\n\r\nconst filter = createReducer('', {\r\n    [actions.changeFilter]: (_, { payload }) => payload,\r\n}\r\n);\r\n\r\n// const contacts = (state = [], { type, payload }) => {\r\n//     switch (type) {\r\n//         case types.ADD:\r\n//             return [...state, payload]\r\n//         case types.DELETE:\r\n//             return state.filter(({ id }) => id !== payload)\r\n//         default: return state\r\n//     }\r\n// };\r\n\r\n\r\n// const filter = (state = '', { type, payload }) => {\r\n//         switch (type) {  \r\n//         case types.CHANGE_FILTER:\r\n//             return payload\r\n//               default: return state\r\n//     }\r\n//  }\r\n\r\n    //описали редьюсер\r\nexport default combineReducers({\r\n    contacts,\r\n    filter\r\n})","//import { combineReducers } from 'redux';\r\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\nimport logger from 'redux-logger'\r\nimport contactsReduser from './contacts/contacts-reducer'\r\n\r\n// const rootReducer = combineReducers({\r\n//     contacts: contactsReduser,\r\n// });\r\n\r\n//console.log(getDefaultMiddleware())\r\n\r\nconst middleware = [...getDefaultMiddleware(), logger]\r\n\r\n// const store = createStore(rootReducer, composeWithDevTools());\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n      contacts:  contactsReduser,\r\n    },\r\n    middleware,\r\n})\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport store from './redux/store'\nimport { Provider } from 'react-redux';\n\n//console.log(store)\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>;\n     </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}